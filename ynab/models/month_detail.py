# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ynab.models.category import Category  # noqa: F401,E501
from ynab.models.month_summary import MonthSummary  # noqa: F401,E501


class MonthDetail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'month': 'date',
        'note': 'str',
        'to_be_budgeted': 'float',
        'age_of_money': 'float',
        'categories': 'list[Category]'
    }

    attribute_map = {
        'month': 'month',
        'note': 'note',
        'to_be_budgeted': 'to_be_budgeted',
        'age_of_money': 'age_of_money',
        'categories': 'categories'
    }

    def __init__(self, month=None, note=None, to_be_budgeted=None, age_of_money=None, categories=None):  # noqa: E501
        """MonthDetail - a model defined in Swagger"""  # noqa: E501

        self._month = None
        self._note = None
        self._to_be_budgeted = None
        self._age_of_money = None
        self._categories = None
        self.discriminator = None

        self.month = month
        self.note = note
        self.to_be_budgeted = to_be_budgeted
        self.age_of_money = age_of_money
        self.categories = categories

    @property
    def month(self):
        """Gets the month of this MonthDetail.  # noqa: E501


        :return: The month of this MonthDetail.  # noqa: E501
        :rtype: date
        """
        return self._month

    @month.setter
    def month(self, month):
        """Sets the month of this MonthDetail.


        :param month: The month of this MonthDetail.  # noqa: E501
        :type: date
        """
        if month is None:
            raise ValueError("Invalid value for `month`, must not be `None`")  # noqa: E501

        self._month = month

    @property
    def note(self):
        """Gets the note of this MonthDetail.  # noqa: E501


        :return: The note of this MonthDetail.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this MonthDetail.


        :param note: The note of this MonthDetail.  # noqa: E501
        :type: str
        """
        if note is None:
            raise ValueError("Invalid value for `note`, must not be `None`")  # noqa: E501

        self._note = note

    @property
    def to_be_budgeted(self):
        """Gets the to_be_budgeted of this MonthDetail.  # noqa: E501

        The current balance of the account in milliunits format  # noqa: E501

        :return: The to_be_budgeted of this MonthDetail.  # noqa: E501
        :rtype: float
        """
        return self._to_be_budgeted

    @to_be_budgeted.setter
    def to_be_budgeted(self, to_be_budgeted):
        """Sets the to_be_budgeted of this MonthDetail.

        The current balance of the account in milliunits format  # noqa: E501

        :param to_be_budgeted: The to_be_budgeted of this MonthDetail.  # noqa: E501
        :type: float
        """
        if to_be_budgeted is None:
            raise ValueError("Invalid value for `to_be_budgeted`, must not be `None`")  # noqa: E501

        self._to_be_budgeted = to_be_budgeted

    @property
    def age_of_money(self):
        """Gets the age_of_money of this MonthDetail.  # noqa: E501


        :return: The age_of_money of this MonthDetail.  # noqa: E501
        :rtype: float
        """
        return self._age_of_money

    @age_of_money.setter
    def age_of_money(self, age_of_money):
        """Sets the age_of_money of this MonthDetail.


        :param age_of_money: The age_of_money of this MonthDetail.  # noqa: E501
        :type: float
        """
        if age_of_money is None:
            raise ValueError("Invalid value for `age_of_money`, must not be `None`")  # noqa: E501

        self._age_of_money = age_of_money

    @property
    def categories(self):
        """Gets the categories of this MonthDetail.  # noqa: E501

        The budget month categories  # noqa: E501

        :return: The categories of this MonthDetail.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this MonthDetail.

        The budget month categories  # noqa: E501

        :param categories: The categories of this MonthDetail.  # noqa: E501
        :type: list[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonthDetail):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
