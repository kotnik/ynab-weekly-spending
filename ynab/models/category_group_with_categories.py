# coding: utf-8

"""
    YNAB API Endpoints

    Our API uses a REST based design, leverages the JSON data format, and relies upon HTTPS for transport. We respond with meaningful HTTP response codes and if an error occurs, we include error details in the response body.  API Documentation is at https://api.youneedabudget.com  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from ynab.models.category import Category  # noqa: F401,E501
from ynab.models.category_group import CategoryGroup  # noqa: F401,E501


class CategoryGroupWithCategories(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'hidden': 'bool',
        'categories': 'list[Category]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'hidden': 'hidden',
        'categories': 'categories'
    }

    def __init__(self, id=None, name=None, hidden=None, categories=None):  # noqa: E501
        """CategoryGroupWithCategories - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._hidden = None
        self._categories = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.hidden = hidden
        self.categories = categories

    @property
    def id(self):
        """Gets the id of this CategoryGroupWithCategories.  # noqa: E501


        :return: The id of this CategoryGroupWithCategories.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CategoryGroupWithCategories.


        :param id: The id of this CategoryGroupWithCategories.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this CategoryGroupWithCategories.  # noqa: E501


        :return: The name of this CategoryGroupWithCategories.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CategoryGroupWithCategories.


        :param name: The name of this CategoryGroupWithCategories.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def hidden(self):
        """Gets the hidden of this CategoryGroupWithCategories.  # noqa: E501

        Whether or not the category group is hidden  # noqa: E501

        :return: The hidden of this CategoryGroupWithCategories.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this CategoryGroupWithCategories.

        Whether or not the category group is hidden  # noqa: E501

        :param hidden: The hidden of this CategoryGroupWithCategories.  # noqa: E501
        :type: bool
        """
        if hidden is None:
            raise ValueError("Invalid value for `hidden`, must not be `None`")  # noqa: E501

        self._hidden = hidden

    @property
    def categories(self):
        """Gets the categories of this CategoryGroupWithCategories.  # noqa: E501

        Category group categories  # noqa: E501

        :return: The categories of this CategoryGroupWithCategories.  # noqa: E501
        :rtype: list[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this CategoryGroupWithCategories.

        Category group categories  # noqa: E501

        :param categories: The categories of this CategoryGroupWithCategories.  # noqa: E501
        :type: list[Category]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CategoryGroupWithCategories):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
